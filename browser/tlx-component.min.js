(function(){"use strict";const tlx=this.tlx||(this.tlx={});tlx.options||(tlx.options={});tlx.options.components=true;tlx.components={};tlx.define=function(tagName,component){this.components[tagName]=component;if(this.promises&&this.promises[tagName]){this.promises[tagName](component)}};tlx.get=function(tagName){return this.components[tagName]};tlx.mount=function(...tagNames){tagNames.length>0||(tagNames=Object.keys(this.components));for(let tagName of tagNames){const component=this.components[tagName],elements=[].slice.call(document.getElementsByTagName(tagName)||[]);for(let element of elements){if(!element.vnode){const attributes=[].slice.call(element.attributes).reduce((accum,attribute)=>{accum[attribute.name]=attribute.value;return accum},{});component(attributes,element).vnode.render()}}}};tlx.whenDefined=function(tagName){this.promises||(this.promises={});let resolver;const promise=new Promise(resolve=>resolver=resolve);this.promises[tagName]=resolver;!this.components[tagName]||resolver(this.components[tagName]);return promise};tlx.getTagName=function(component){for(let tagName in this.components){if(this.components[tagName]===component||this.components[tagName].class===component)return tagName}};tlx.Mixin={initialize(attributes={}){const properties=Object.assign({},attributes);for(let key in properties){const value=properties[key],type=typeof value;type!=="object"||delete attributes[key]}const vnode=this.vNode(null,attributes);for(let key in properties){vnode[key]=tlx.resolve(vnode,properties[key],attributes,vnode.state)}return vnode}};if(typeof module!=="undefined")module.exports=tlx;if(typeof window!=="undefined")window.tlx=tlx}).call(typeof window!=="undefined"?window:this);